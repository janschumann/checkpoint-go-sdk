/*
 * Check Point Management API
 *
 * Generated by https://github.com/janschumann/checkpoint-go-sdk.
 *
 * API version: v1.5
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

type GatewayCkpReply struct {
	// Anti-Bot blade enabled.
	AntiBot bool `json:"anti-bot,omitempty" xml:"anti-bot"`
	// Anti-Virus blade enabled.
	AntiVirus bool `json:"anti-virus,omitempty" xml:"anti-virus"`
	// Application Control blade enabled.
	ApplicationControl bool `json:"application-control,omitempty" xml:"application-control"`
	// Color of the object. Should be one of existing colors.
	Color string `json:"color,omitempty" xml:"color"`
	// Comments string.
	Comments string `json:"comments,omitempty" xml:"comments"`
	// Content Awareness blade enabled.
	ContentAwareness bool `json:"content-awareness,omitempty" xml:"content-awareness"`
	Domain *ApiDomainIdentifier `json:"domain,omitempty" xml:"domain"`
	// Dynamic IP address.
	DynamicIp bool `json:"dynamic-ip,omitempty" xml:"dynamic-ip"`
	// Firewall blade enabled.
	Firewall bool `json:"firewall,omitempty" xml:"firewall"`
	FirewallSettings *FirewallSettingsReply `json:"firewall-settings,omitempty" xml:"firewall-settings"`
	// How much details are returned depends on the details-level field of the request. This table shows the level of detail shown when details-level is set to standard.
	Groups []ApiObjectStandardIdentifier `json:"groups,omitempty" xml:"groups"`
	// Gateway platform hardware type.
	Hardware string `json:"hardware,omitempty" xml:"hardware"`
	// Object icon.
	Icon string `json:"icon,omitempty" xml:"icon"`
	// Network interfaces.
	Interfaces []NetworkInterfaceReply `json:"interfaces,omitempty" xml:"interfaces"`
	// Intrusion Prevention System blade enabled.
	Ips bool `json:"ips,omitempty" xml:"ips"`
	// IPv4 address.
	Ipv4Address string `json:"ipv4-address,omitempty" xml:"ipv4-address"`
	// IPv6 address.
	Ipv6Address string `json:"ipv6-address,omitempty" xml:"ipv6-address"`
	LogsSettings *LogsSettingsReply `json:"logs-settings,omitempty" xml:"logs-settings"`
	MetaInfo *MetaInfoForTopLevelReply `json:"meta-info,omitempty" xml:"meta-info"`
	// Object name. Should be unique in the domain.
	Name string `json:"name,omitempty" xml:"name"`
	// Gateway platform operating system.
	OsName string `json:"os-name,omitempty" xml:"os-name"`
	// Indicates whether the object is read-only.
	ReadOnly bool `json:"read-only,omitempty" xml:"read-only"`
	// Save logs locally on the gateway.
	SaveLogsLocally bool `json:"save-logs-locally,omitempty" xml:"save-logs-locally"`
	// Server(s) to send alerts to.
	SendAlertsToServer []string `json:"send-alerts-to-server,omitempty" xml:"send-alerts-to-server"`
	// Backup server(s) to send logs to.
	SendLogsToBackupServer []string `json:"send-logs-to-backup-server,omitempty" xml:"send-logs-to-backup-server"`
	// Servers(s) to send logs to.
	SendLogsToServer []string `json:"send-logs-to-server,omitempty" xml:"send-logs-to-server"`
	// Secure Internal Communication name.
	SicName string `json:"sic-name,omitempty" xml:"sic-name"`
	// Secure Internal Communication state.
	SicState string `json:"sic-state,omitempty" xml:"sic-state"`
	// Collection of tag objects identified by the name or UID. How much details are returned depends on the details-level field of the request. This table shows the level of detail shown when details-level is set to standard.
	Tags []ApiObjectStandardIdentifier `json:"tags,omitempty" xml:"tags"`
	// Threat Emulation blade enabled.
	ThreatEmulation bool `json:"threat-emulation,omitempty" xml:"threat-emulation"`
	// Threat Extraction blade enabled.
	ThreatExtraction bool `json:"threat-extraction,omitempty" xml:"threat-extraction"`
	// Type of the object.
	Type_ string `json:"type,omitempty" xml:"type"`
	// Object unique identifier.
	Uid string `json:"uid,omitempty" xml:"uid"`
	// URL Filtering blade enabled.
	UrlFiltering bool `json:"url-filtering,omitempty" xml:"url-filtering"`
	// Gateway platform version.
	Version string `json:"version,omitempty" xml:"version"`
	// VPN blade enabled.
	Vpn bool `json:"vpn,omitempty" xml:"vpn"`
	VpnSettings *VpnSettingsReply `json:"vpn-settings,omitempty" xml:"vpn-settings"`
}
